name: Build and Push n8n Chromium Image

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 4 * * 1' # Weekly security rebuild (Mondays 04:00 UTC)
  workflow_dispatch:
    inputs:
      n8n_version:
        description: "Override n8n version (e.g. 1.53.0)"
        required: false
        type: string

env:
  IMAGE_NAME: n8n-chromium
  # Pin a default version; can override via workflow inputs later
  N8N_VERSION: 1.52.4

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      n8n_version: ${{ steps.ver.outputs.chosen }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: env.DOCKERHUB_USERNAME && env.DOCKERHUB_TOKEN
        run: echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GHCR
        run: echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Resolve n8n version
        id: ver
        run: |
          if [ -n "${{ github.event.inputs.n8n_version }}" ]; then
            echo "chosen=${{ github.event.inputs.n8n_version }}" >> $GITHUB_OUTPUT
          else
            echo "chosen=${{ env.N8N_VERSION }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and Push (GHCR)
        run: |
          IMAGE_TAG_BASE=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          N8N_VER=${{ steps.ver.outputs.chosen }}
          docker buildx build \
            --build-arg N8N_VERSION=$N8N_VER \
            -t $IMAGE_TAG_BASE:$N8N_VER \
            -t $IMAGE_TAG_BASE:latest \
            --push .

      - name: Build and Push (Docker Hub)
        if: env.DOCKERHUB_USERNAME && env.DOCKERHUB_TOKEN
        run: |
          IMAGE_TAG_BASE=${{ secrets.DOCKERHUB_USERNAME}}/${{ env.IMAGE_NAME }}
          N8N_VER=${{ steps.ver.outputs.chosen }}
          docker buildx build \
            --build-arg N8N_VERSION=$N8N_VER \
            -t $IMAGE_TAG_BASE:$N8N_VER \
            -t $IMAGE_TAG_BASE:latest \
            --push .
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  security-scan:
    name: Trivy Vulnerability Scan
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      security-events: write
    steps:
      - name: Login to GHCR
        run: echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
      - name: Pull built image
        run: |
          IMAGE_TAG_BASE=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          docker pull $IMAGE_TAG_BASE:${{ needs.build.outputs.n8n_version }}
      - name: Run Trivy (fail on HIGH/CRITICAL)
        uses: aquasecurity/trivy-action@v0.20.0
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.n8n_version }}
          format: 'table'
          exit-code: '1'
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
        # Set continue-on-error: true if you prefer NOT to fail the pipeline on findings initially
      - name: (Optional) Generate SBOM (CycloneDX JSON)
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.n8n_version }}
          docker run --rm aquasec/trivy:latest image --scanners license --format cyclonedx --output sbom.json $IMAGE || true
          echo "SBOM generated (sbom.json)"
